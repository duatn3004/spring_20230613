package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.domain.UserVO;
import com.myweb.www.repository.UserDAO;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@RequestMapping("/board/*")
@Slf4j
@Controller
public class BoardController {
   @Inject
   private BoardService bsv;
   @Inject
   private UserDAO udao;
   
   @GetMapping("/register")
   public String registerGet() {
      return "/board/register";
   }
   
   @PostMapping("/register")
   public String registerPost(BoardVO bvo, RedirectAttributes rAttr) {
      log.info(">>> bvo"+ bvo.toString());
      int isOk = bsv.register(bvo);
      log.info(">>> board register >>" + (isOk >0 ? "ok":"fail"));
      rAttr.addFlashAttribute("isOk", isOk); //1회성으로 설정해줌
      return "redirect:/"; //새로고침해서 홈으로 가도록 -> 현재 애플리케이션의 루트 경로로 리다이렉트하라는 의미
   }
   
   // insert, update, delete => redirect 처리
   //RedirectAttributes 객체사용 : 데이터의 새로고침
   
   @GetMapping("/list") 
   public String list(Model m, PagingVO pvo) {
	  log.info("pageno : "+ pvo.getPageNO());
      List<BoardVO> list = bsv.getList();
      m.addAttribute("list", list);
      
      return "/board/list"; //list에서 와서 list로 가니까 String이 아닌 void로 해도 괜찮음
   }
   
   //detail을 가져오는 케이스 : detail, modify 
   @GetMapping({"/detail", "/modify"})
   //값을 void로 주면 mapping의 요소값으로 돌아감 (board/detail로 돌아감) 왔던 곳으로 다시 감
   public void detail(Model m, @RequestParam("bno")int bno, HttpServletRequest r) { //물음표 달고 오는건 @RequestParam으로 
      log.info(">>> bno" + bno);
      log.info("mapping" + r.getRequestURI());
      String mapping = r.getRequestURI();
      BoardVO bvo = bsv.getDetail(bno);
      String path = mapping.substring(mapping.lastIndexOf("/")+1);
      log.info(">>>path"+ path);
      if(path.equals("detail")) {
         int isOk = bsv.readCount(bno);
      }
      
      log.info(">>>bvo"+ bvo);
      m.addAttribute("board", bvo);
   }
   
   @PostMapping("/modify")
   public String update(BoardVO bvo, RedirectAttributes rAttr, HttpServletRequest request) {
      log.info(">>> bvo"+ bvo.toString());
      //세션의 로그인 id가 작성자와 일치하면 삭제, 아니면 0 or 1 보내서 스크립트에서 작성자가 일치하지 않습니다.
      HttpSession ses = request.getSession();
      UserVO sesUser = (UserVO)ses.getAttribute("ses");
      UserVO user = udao.getUser(sesUser.getId()); //글을 작성한 작성자의 객체를 가지고 옴
      //DB상 update하기
      int isOk = bsv.modify(bvo,user);
      log.info(">>> modify >>"+ (isOk>0 ? "ok":"fail"));
      rAttr.addFlashAttribute("msg_modify", isOk>0?"1":"0"); //한 번만 처리되도록 addflashAttribute
      return "redirect:/board/list"; 
   }
   
   @GetMapping("/delete")
   public String delete(RedirectAttributes rAttr, @RequestParam("bno")int bno, HttpServletRequest request) {
      //DB상 update 하기  isDel = "Y" => 삭제한 글을 처리하도록
      HttpSession ses = request.getSession();
      UserVO sesUser = (UserVO)ses.getAttribute("ses"); //세션 객체(현재 로그인한 객체)
      log.info(">>> sesUser" + sesUser.toString());
      UserVO user = udao.getUser(sesUser.getId());
      int isOk = bsv.remove(bno, user);
      log.info(">>> modify >>"+ (isOk>0 ? "ok":"fail"));
      return "redirect:/board/list";
   }
   
}